package co.kukurin.tasklist.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import co.kukurin.tasklist.dao.Tasks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASKS.
*/
public class TasksDao extends AbstractDao<Tasks, Long> {

    public static final String TABLENAME = "TASKS";

    /**
     * Properties of entity Tasks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Date_due = new Property(3, java.util.Date.class, "date_due", false, "DATE_DUE");
        public final static Property Date_created = new Property(4, java.util.Date.class, "date_created", false, "DATE_CREATED");
        public final static Property Completed = new Property(5, boolean.class, "completed", false, "COMPLETED");
        public final static Property Priority = new Property(6, Byte.class, "priority", false, "PRIORITY");
    };


    public TasksDao(DaoConfig config) {
        super(config);
    }
    
    public TasksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASKS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TITLE' TEXT NOT NULL ," + // 1: title
                "'DESCRIPTION' TEXT NOT NULL ," + // 2: description
                "'DATE_DUE' INTEGER," + // 3: date_due
                "'DATE_CREATED' INTEGER NOT NULL ," + // 4: date_created
                "'COMPLETED' INTEGER NOT NULL ," + // 5: completed
                "'PRIORITY' INTEGER);"); // 6: priority
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASKS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tasks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getDescription());
 
        java.util.Date date_due = entity.getDate_due();
        if (date_due != null) {
            stmt.bindLong(4, date_due.getTime());
        }
        stmt.bindLong(5, entity.getDate_created().getTime());
        stmt.bindLong(6, entity.getCompleted() ? 1l: 0l);
 
        Byte priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(7, priority);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tasks readEntity(Cursor cursor, int offset) {
        Tasks entity = new Tasks( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date_due
            new java.util.Date(cursor.getLong(offset + 4)), // date_created
            cursor.getShort(offset + 5) != 0, // completed
            cursor.isNull(offset + 6) ? null : (byte) cursor.getShort(offset + 6) // priority
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tasks entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setDescription(cursor.getString(offset + 2));
        entity.setDate_due(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDate_created(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCompleted(cursor.getShort(offset + 5) != 0);
        entity.setPriority(cursor.isNull(offset + 6) ? null : (byte) cursor.getShort(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tasks entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tasks entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
